% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/df_discrete.R
\name{mod_eval_grid}
\alias{mod_eval_grid}
\title{Create discrete levels of explanatory variables in a model/dataset.}
\usage{
mod_eval_grid(mod, formula = NULL, nlevels = 3, pretty = TRUE,
  npts = 100, ...)
}
\arguments{
\item{mod}{either a data frame or a model from which to extract the data to be discretized. If
a model is given, then the model output will be appended for all rows.}

\item{formula}{a formula with one variable to identify a variable to be sampled finely (npts over the range)}

\item{nlevels}{the number of discrete levels to use, by default}

\item{pretty}{if TRUE, make the discretized versions of numerical values sensibly spaced for viewing}

\item{npts}{the number of points to evaluate the variable identified by formula (default: 100)}

\item{...}{a more concise mechanism to passing desired values for variables}
}
\value{
A dataframe containing all combinations of the selected values for
the explanatory variables. If there are p explanatory variables,
there will be about \code{nlevels^p} cases.
}
\description{
This function tries to choose sensible values of the explanatory variables
from the data used to build a model or any other specified data.
(or from data specified with the \code{data =} argument.)
}
\details{
For categorical variables, the most populated levels are used. For quantitative
variables, a sequence of \code{pretty()} values is generated.

For categorical variables, will return the nlevels most popular levels, unless
the levels are specified explicitly in an argument. When the model is a classifier, the model outputs will
be the probabilities of each level in the response variable. These will be named \code{prob_[level]}.

Using \code{pretty = TRUE} may cause the number of levels for quantitative variables to be somewhat different
from \code{nlevels}.
}
\examples{
\dontrun{
mod1 <- lm(wage ~ age * sex + sector, data = mosaicData::CPS85)
for_plotting <- mod_eval_grid(mod1, ~ age, nlevels = Inf)
gf_line(model_output ~ age | sector, color = ~ sex, data = for_plotting )
for_plotting2 <- mod_eval_grid(mod1, ~ age, sector = c("const", "service"))
gf_line(model_output ~ age | sector, color = ~ sex, data = for_plotting2 )
}
}
